@use '../../styles/colors.module';
@use '../../styles/mixins.module';

.container {
  position: relative;
  overflow: visible;
  display: flex;

  &.show {
    z-index: 1;
  }
}

.custom {
  @include mixins.transition(border-color);
  border: 2px solid colors.getColor(primary-3);
  border-radius: 0.25rem;
  position: absolute;
  width: 100%;

  &.error {
    border-color: colors.getColor(error-500);
  }

  &.success {
    border-color: colors.getColor(success);
  }

  &.disabled {
    border-color: colors.getColor(grey);
  }
}

.display {
  position: relative;
}

.input {
  padding: 0.5rem 2.5rem 0.5rem 0.75rem;
  box-sizing: border-box;
  border-radius: 0.25rem;
  border: none;
  width: 100%;

  &:disabled {
    cursor: not-allowed;
  }
}

.caret {
  @include mixins.transition(transform color);
  color: colors.getColor(primary-3);
  inset: 0 0.75rem 0 auto;
  position: absolute;
  pointer-events: none;
  margin: auto;
  width: 1rem;
  height: auto;

  &.show {
    transform: rotate(180deg);
  }

  .disabled & {
    color: colors.getColor(grey);
  }
}

.menu {
  @include mixins.transition(max-height);
  background: colors.getColor(copy-light);
  list-style-type: none;
  border-top: none;
  overflow: auto;
  max-height: 0;
  padding: 0;
  margin: 0;

  &.show {
    max-height: 10rem;
  }
}

.item {
  @include mixins.transition(background-color);
  padding: 0.5rem 0.75rem;
  cursor: pointer;
  background: none;
  text-align: start;
  border: none;
  width: 100%;

  &:hover,
  &:focus {
    background-color: colors.getColor(copy-dark, $alpha: 0.06);
  }

  &:active,
  &.selected {
    background-color: colors.getColor(copy-dark, $alpha: 0.12);
  }
}
