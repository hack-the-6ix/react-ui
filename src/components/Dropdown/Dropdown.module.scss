@use '../../styles/colors.module';
@use '../../styles/mixins.module';
@use '../../styles/vars.module';

.container {
  position: relative;
  overflow: visible;
  display: flex;

  &.show {
    z-index: 1;
  }
}

.color {
  @each $color, $_ in colors.$config {
    &--#{$color} {
      background-color: colors.getColor($color);
    }
  }
}

$borderRadius: 1.5rem;

.custom {
  @include mixins.transition(border-color);
  //border: 2px solid colors.getColor(primary-700);
  border-radius: $borderRadius;
  position: absolute;
  width: 100%;

  &.error {
    border-color: colors.getColor(error-500);
  }

  &.success {
    border-color: colors.getColor(success);
  }

  &.disabled {
    border-color: colors.getColor(grey);
  }
}

%trigger {
  padding: 0.75rem;
  border-radius: 0.25rem;
  box-sizing: border-box;
  text-align: start;
  background: none;
  cursor: pointer;
  border: none;
  width: 100%;

  &:disabled {
    cursor: not-allowed;
  }
}

.select {
  @extend %trigger;
  color: transparent;
  appearance: none;
  opacity: 0;

  pointer-events: none;

  @media (pointer: coarse) {
    opacity: 1;
    z-index: 2;
  }

  &:focus {
    outline: none;
    opacity: 1;
    z-index: 2;
  }
}

.button {
  @extend %trigger;
  @include mixins.transition(background-color);
  background: colors.getColor(neutral-50, null, 0.18);
  grid-template-columns: auto 1rem;
  align-items: center;
  grid-gap: 0.75rem;
  display: grid;

  color: colors.getColor(neutral-50);

  border-top-left-radius: $borderRadius;
  border-top-right-radius: $borderRadius;
  border-bottom-left-radius: $borderRadius;
  border-bottom-right-radius: $borderRadius;

  .disabled & {
    color: colors.getColor(neutral-50, null, 0.38);
    background-color: colors.getColor(neutral-50, null, 0.08);
    cursor: not-allowed;
  }

  &.expanded {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }
}

.placeholder {
  color: colors.getColor(neutral-400);

  .disabled & {
    color: colors.getColor(neutral-50, null, 0.38);
    cursor: not-allowed;
  }
}

.caret {
  @include mixins.transition(transform color);
  color: colors.getColor(neutral-50);
  transform: rotate(180deg);
  &.show {
    transform: rotate(0deg);
  }

  .disabled & {
    color: colors.getColor(grey);
  }
}

.menu {
  @include mixins.transition(max-height);
  background: colors.getColor(neutral-50, null, 0.25);
  list-style-type: none;
  border-top: none;
  overflow: auto;
  max-height: 0;
  padding: 0;
  margin: 0;

  border-bottom-left-radius: $borderRadius;
  border-bottom-right-radius: $borderRadius;

  scrollbar-width: thin;

  &::-webkit-scrollbar {
    width: 5px;
  }

  &::-webkit-scrollbar-thumb {
    background: #c5c5c5;
  }

  &.show {
    max-height: 10rem;
  }
}

.item {
  @include mixins.transition(background-color);
  color: colors.getColor(copy-light);
  padding: 0.5rem 0.75rem;
  cursor: pointer;
  background: none;
  text-align: start;
  border: none;
  width: 100%;

  &:hover,
  &:focus {
    background-color: colors.getColor(neutral-50, $alpha: 0.38);
  }

  &:active,
  &.selected {
    background-color: colors.getColor(neutral-50, $alpha: 0.5);
  }
}
