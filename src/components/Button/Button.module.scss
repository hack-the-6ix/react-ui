@use '../../styles/colors.module';
@use '../../styles/mixins.module';

%disabled {
  cursor: not-allowed;
}

.base {
  @include mixins.transition(background-color border-color color);
  padding: 0.75rem 1.5rem;
  border-radius: 4rem;
  align-items: center;
  justify-content: center;
  display: flex;
  cursor: pointer;
  border: none;

  &.disabled,
  &:disabled {
    background-color: colors.getColor(disabled-dark);
    border-color: colors.getColor(disabled-dark);
    color: colors.getColor(grey);
    cursor: not-allowed;
  }
}

.color {

  @each $color,
  $_ in colors.$config {
    &--#{$color} {
      --button-c: #{colors.getColor($color)};
      --button-h: #{colors.getColor($color, hover)};
      --button-a: #{colors.getColor($color, active)};
    }
  }
}

.variant {
  &--solid {
    background-color: var(--button-c);
    color: colors.getColor(copy-light);

    &:not(:disabled),
    &:not(.disabled) {

      &:hover,
      &:focus {
        background-color: var(--button-h);
      }

      &:active {
        background-color: var(--button-a);
      }
    }
  }

  &--outline {
    background-color: var(--button-c);
    border: 1px solid colors.getColor(neutral-50);
    color: colors.getColor(neutral-50);

    &:not(:disabled),
    &:not(.disabled) {

      &:hover,
      &:focus {
        background-color: var(--button-h);
        color: colors.getColor(copy-light);
      }

      &:active {
        background-color: var(--button-a);
        color: colors.getColor(copy-light);
      }
    }
  }
}

.icon {
  &:first-child {
    margin-right: 1rem;
  }

  &:last-child {
    margin-left: 1rem;
  }
}